from django.db import models
from django.contrib.auth.models import User
from django.db.models import Sum

class Category(models.Model):
    CATEGORY_TYPES = (
        ('income', '‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö'),
        ('expense', '‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢'),
    )
    
    name = models.CharField(max_length=100, verbose_name='‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà')
    type = models.CharField(max_length=10, choices=CATEGORY_TYPES, verbose_name='‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó')
    icon = models.CharField(max_length=50, default='üí∞', verbose_name='‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô')
    color = models.CharField(max_length=7, default='#007bff', verbose_name='‡∏™‡∏µ')
    user = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name='‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ')
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        verbose_name = '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà'
        verbose_name_plural = '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà'
        ordering = ['name']
        
    def __str__(self):
        return f"{self.icon} {self.name}"

class Transaction(models.Model):
    TRANSACTION_TYPES = (
        ('income', '‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö'),
        ('expense', '‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢'),
    )
    
    user = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name='‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ')
    category = models.ForeignKey(Category, on_delete=models.CASCADE, verbose_name='‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà')
    type = models.CharField(max_length=10, choices=TRANSACTION_TYPES, verbose_name='‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó')
    title = models.CharField(max_length=200, verbose_name='‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£')
    description = models.TextField(blank=True, null=True, verbose_name='‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î')
    amount = models.DecimalField(max_digits=12, decimal_places=2, verbose_name='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô')
    date = models.DateField(verbose_name='‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà')
    notes = models.TextField(blank=True, null=True, verbose_name='‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'
        verbose_name_plural = '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'
        ordering = ['-date', '-created_at']
        
    def __str__(self):
        return f"{self.title} - {self.amount:,.2f} ‡∏ö‡∏≤‡∏ó"
    
    @property
    def is_income(self):
        return self.type == 'income'
    
    @property
    def is_expense(self):
        return self.type == 'expense'

class UserProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, verbose_name='‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ')
    phone = models.CharField(max_length=20, blank=True, null=True, verbose_name='‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå')
    date_of_birth = models.DateField(blank=True, null=True, verbose_name='‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = '‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
        verbose_name_plural = '‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
        
    def __str__(self):
        return f"‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á {self.user.username}"